# 这个目录的配置会被打包在jar中，但是假如在jar的平行目录下或平行目录config下有application.properties，则会使用外部配置
#==================================
# servlet 相关配置
#----------------------------------
server.port=8021
# 设置项目路径。默认是/
server.servlet.context-path=/
# 设置session超时时间。单位为秒
server.servlet.session.timeout=1800
#显示应用程序的名称
server.servlet.application-display-name=demo
server.servlet.path=/

##debug配置是否调试模式，如果打包发布的话，需要设置为false。
debug=false

#HTTP 消息转换,用于HTTP消息转换的首选JSON映射器。默认情况下，根据环境自动检测
#spring.http.converters.preferred-json-mapper=

#HTTP 编码（HttpEncodingProperties）
#HTTP请求和响应的字符集。如果未明确设置，则添加到“Content-Type”标题中。
spring.http.encoding.charset=UTF-8
#是否启用http编码支持。
spring.http.encoding.enabled=true
#是否强制编码到HTTP请求和响应的配置字符集。
#spring.http.encoding.force=true
#是否强制编码到HTTP请求上配置的字符集。未指定“强制”时默认为true。
#spring.http.encoding.force-request=true
#是否强制编码到HTTP响应上配置的字符集
#spring.http.encoding.force-response=true
#映射的编码区域。
#spring.http.encoding.mapping=

server.tomcat.uri-encoding=UTF-8
#==================================
# 日志 相关配置
#----------------------------------
# 日志配置方式。配置总体的日志级别和对应包的日志级别.使用logging.level开头即可
logging.file=logs/demo.log
#logging.config=#location of config file (default classpath:logback.xml for logback)
#logging.level.org.springframework.security=INFO

###############################################################################
#####database使用druid
#####配置参考
####https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter
####jdbc参考网址使用spring.datasource.druid.url：springboot2启动报错；
###############################################################################
# 数据库访问配置
# 主数据源，默认的
#spring.datasource.name=datasource
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource 
#spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mytest?useUnicode=true&characterEncoding=utf-8
spring.datasource.username=mytest
spring.datasource.password=mytest
#spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
#spring.datasource.url=
#spring.datasource.username=
#spring.datasource.password=

#####datasource druid pool
# 初始化大小，最小，最大
spring.datasource.druid.initial-size=5
spring.datasource.druid.max-active=20
spring.datasource.druid.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 打开PSCache，并且指定每个连接上PSCache的大小 
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size= 20
#spring.datasource.druid.max-open-prepared-statements= #和上面的等价
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
#spring.datasource.druid.validation-query-timeout=
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.test-while-idle=true
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒 
spring.datasource.druid.min-evictable-idle-time-millis=300000
#spring.datasource.druid.max-evictable-idle-time-millis=
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 
spring.datasource.druid.filters=stat
#spring.datasource.druid.filter.stat.log-slow-sql=true
#spring.datasource.druid.filter.stat.merge-sql=true
#spring.datasource.druid.filter.stat.slow-sql-millis=5000
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.useGlobalDataSourceStat=true

#####druid监控配置
## WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
#是否启用StatFilter默认值true
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
#session统计功能
#spring.datasource.druid.web-stat-filter.session-stat-enable=true
#最大session数
#spring.datasource.druid.web-stat-filter.session-stat-max-count=100000
#你可以配置principalSessionName，使得druid能够知道当前的session的用户是谁
#spring.datasource.druid.web-stat-filter.principal-session-name=admin
#你可以配置principalSessionName，使得druid能够知道当前的cookie的用户是谁
#spring.datasource.druid.web-stat-filter.principal-cookie-name=admin
#置profileEnable能够监控单个url调用的sql列表。
spring.datasource.druid.web-stat-filter.profile-enable=true

## StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
spring.datasource.druid.stat-view-servlet.enabled= true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.stat-view-servlet.reset-enable=false
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=111111
#spring.datasource.druid.stat-view-servlet.allow=127.0.0.1
#spring.datasource.druid.stat-view-servlet.deny=192.168.10.1

## Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
# Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
#spring.datasource.druid.aop-patterns= com.zwx.*

#配置wall filter
spring.datasource.druid.filter.wall.enabled=true
spring.datasource.druid.filter.wall.db-type=oracle
spring.datasource.druid.filter.wall.config.alter-table-allow=false
spring.datasource.druid.filter.wall.config.truncate-allow=false
spring.datasource.druid.filter.wall.config.drop-table-allow=false
#是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。
spring.datasource.druid.filter.wall.config.none-base-statement-allow=false
#检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险
spring.datasource.druid.filter.wall.config.update-where-none-check=true
#SELECT ... INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的
spring.datasource.druid.filter.wall.config.select-into-outfile-allow=false
#是否允许调用Connection.getMetadata方法，这个方法调用会暴露数据库的表信息
spring.datasource.druid.filter.wall.config.metadata-allow=true
#对被认为是攻击的SQL进行LOG.error输出
spring.datasource.druid.filter.wall.log-violation=true
#对被认为是攻击的SQL抛出SQLExcepton
spring.datasource.druid.filter.wall.throw-exception=true

#JPA Configuration:  
spring.jpa.database=MYSQL
#spring.jpa.database=Oracle
# Show or not log for each sql query
spring.jpa.show-sql=true
# ignored by Hibernate, might be usefule for other vendors  
#spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=update
# Hibernate ddl auto (create, create-drop, update)  
spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy  
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#mybatis.config-location=classpath:mybatis-config.xml
#mybatis mapper文件的位置
#mybatis.mapper-locations=classpath*:mapper/**/*.xml
#扫描pojo类的位置,在此处指明扫描实体类的包，在mapper中就可以不用写pojo类的全路径名了
#mybatis.type-aliases-package=com.zwx


#SECURITY (SecurityProperties)
security.basic.enabled=false


## URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`  
# failover:(tcp://localhost:61616,tcp://localhost:61617)  
# tcp://localhost:61616  
#spring.activemq.broker-url=tcp://localhost:61616
#spring.activemq.in-memory=true
#spring.activemq.user=admin
#spring.activemq.password=admin
#spring.activemq.pool.enabled=false //如果此处设置为true，需要加如下的依赖包，否则会自动配置失败，报JmsMessagingTemplate注入失败  

#自定义配置
ls.app_type=1
ls.app_id=1
ls.app_name=default


#spring.application.name=
#eureka.client.serviceUrl.defaultZone=http://localhost:8001/eureka

spring.application.name=demo
##spring.cloud.consul.host/port配置的是本地 Consul 的地址和端口（Server 节点和 Client 节点都可以）
#Spring Cloud Consul 会调用 Consul HTTP REST 接口，进行服务注册。
spring.cloud.consul.host=localhost
spring.cloud.consul.port=8500
##spring.cloud.consul.discovery.register.true配置启动是否注册服务，
spring.cloud.consul.discovery.register=true
##spring.cloud.consul.discovery.hostname配置 Spring Boot 服务的主机地址，也可以不进行配置，默认本机地址。
#spring.cloud.consul.discovery.hostname=127.0.0.1
##spring.cloud.consul.discovery.serviceName配置 Consul 注册的服务名称，${spring.application.name}变量是我们上面application.properties配置文件中添加的配置。]
spring.cloud.consul.discovery.serviceName=${spring.application.name}
##spring.cloud.consul.discovery.healthCheckPath配置 Consul 健康检查地址，Actuator 组件帮我们进行了实现，所以我们不需要额外的实现，地址在服务启动的时候，打印信息里面可以看到。
spring.cloud.consul.discovery.healthCheckPath=/actuator/health
##spring.cloud.consul.discovery.healthCheckInterval配置 Consul 健康检查频率，也就是心跳频率。
spring.cloud.consul.discovery.healthCheckInterval=10s
##spring.cloud.consul.discovery.tags配置 Consul 注册服务的 Tags，设置为urlprefix-/serviceName的格式，是自动注册到 Fabio 集群中。
spring.cloud.consul.discovery.tags=${spring.application.name}
##spring.cloud.consul.discovery.instanceId配置 Consul 注册服务 ID。
spring.cloud.consul.discovery.instanceId=${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}
#spring.cloud.consul.discovery.instanceId=${spring.application.name}